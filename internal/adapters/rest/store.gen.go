// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AdminProduct defines model for AdminProduct.
type AdminProduct struct {
	CreatedAt   string  `json:"createdAt"`
	Description string  `json:"description"`
	Dimensions  string  `json:"dimensions"`
	Features    string  `json:"features"`
	Id          string  `json:"id"`
	IsLive      bool    `json:"isLive"`
	Name        string  `json:"name"`
	Notes       string  `json:"notes"`
	Price       float32 `json:"price"`
}

// AdminProductPreview defines model for AdminProductPreview.
type AdminProductPreview struct {
	Id       string  `json:"id"`
	ImageUrl string  `json:"image_url"`
	IsLive   bool    `json:"isLive"`
	Name     string  `json:"name"`
	Price    float32 `json:"price"`
}

// BaseProduct defines model for BaseProduct.
type BaseProduct struct {
	Id    string  `json:"id"`
	Name  string  `json:"name"`
	Price float32 `json:"price"`
}

// Cart defines model for Cart.
type Cart struct {
	Products *[]CartItem `json:"products,omitempty"`
}

// CartItem defines model for CartItem.
type CartItem struct {
	Id       string `json:"id"`
	Quantity int    `json:"quantity"`
}

// CheckoutSession defines model for CheckoutSession.
type CheckoutSession struct {
	ClientSecret *string `json:"clientSecret,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewAdminProduct defines model for NewAdminProduct.
type NewAdminProduct struct {
	Description string  `json:"description"`
	Dimensions  string  `json:"dimensions"`
	Features    string  `json:"features"`
	IsLive      bool    `json:"isLive"`
	Name        string  `json:"name"`
	Notes       string  `json:"notes"`
	Price       float32 `json:"price"`
}

// NewProduct defines model for NewProduct.
type NewProduct struct {
	Description string  `json:"description"`
	Dimensions  string  `json:"dimensions"`
	Features    string  `json:"features"`
	Name        string  `json:"name"`
	Notes       string  `json:"notes"`
	Price       float64 `json:"price"`
}

// Product defines model for Product.
type Product struct {
	Description *string  `json:"description,omitempty"`
	Id          *string  `json:"id,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float64 `json:"price,omitempty"`
}

// ProductImage defines model for ProductImage.
type ProductImage struct {
	Id    string `json:"id"`
	Order int    `json:"order"`
	Url   string `json:"url"`
}

// ProductWithImage defines model for ProductWithImage.
type ProductWithImage struct {
	Description  *string  `json:"description,omitempty"`
	Id           *string  `json:"id,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Price        *float64 `json:"price,omitempty"`
	PrimaryImage *struct {
		Id  *string `json:"id,omitempty"`
		Url *string `json:"url,omitempty"`
	} `json:"primaryImage,omitempty"`
}

// StoreProduct defines model for StoreProduct.
type StoreProduct struct {
	Description *string        `json:"description,omitempty"`
	Dimensions  *string        `json:"dimensions,omitempty"`
	Features    *string        `json:"features,omitempty"`
	Id          *string        `json:"id,omitempty"`
	Images      []ProductImage `json:"images"`
	Name        *string        `json:"name,omitempty"`
	Notes       *string        `json:"notes,omitempty"`
	Price       *float32       `json:"price,omitempty"`
}

// StoreProductPreview defines model for StoreProductPreview.
type StoreProductPreview struct {
	Id    string       `json:"id"`
	Image ProductImage `json:"image"`
	Name  string       `json:"name"`
	Price float32      `json:"price"`
}

// UploadProductImageMultipartBody defines parameters for UploadProductImage.
type UploadProductImageMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// AdminCreateProductJSONRequestBody defines body for AdminCreateProduct for application/json ContentType.
type AdminCreateProductJSONRequestBody = NewAdminProduct

// UploadProductImageMultipartRequestBody defines body for UploadProductImage for multipart/form-data ContentType.
type UploadProductImageMultipartRequestBody UploadProductImageMultipartBody

// CreateCheckoutSessionJSONRequestBody defines body for CreateCheckoutSession for application/json ContentType.
type CreateCheckoutSessionJSONRequestBody = Cart

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = NewProduct

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all products
	// (GET /admin/product)
	AdminGetProducts(ctx echo.Context) error
	// Create a new product
	// (POST /admin/product)
	AdminCreateProduct(ctx echo.Context) error
	// Delete a product
	// (DELETE /admin/product/{id})
	AdminDeleteProduct(ctx echo.Context, id string) error
	// Get a product by ID
	// (GET /admin/product/{id})
	AdminGetProductById(ctx echo.Context, id string) error
	// Get all images for a product
	// (GET /admin/product/{id}/image)
	AdminGetProductImages(ctx echo.Context, id string) error
	// Upload product image
	// (POST /admin/products/{id}/image)
	UploadProductImage(ctx echo.Context, id string) error
	// Create a checkout session
	// (POST /checkout/session)
	CreateCheckoutSession(ctx echo.Context) error
	// Get all products
	// (GET /products)
	GetProducts(ctx echo.Context) error
	// Create a new product
	// (POST /products)
	CreateProduct(ctx echo.Context) error
	// Get all store products
	// (GET /store/products)
	ListStoreProducts(ctx echo.Context) error
	// Get store product by ID
	// (GET /store/products/{id})
	GetStoreProductById(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AdminGetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminGetProducts(ctx)
	return err
}

// AdminCreateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) AdminCreateProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminCreateProduct(ctx)
	return err
}

// AdminDeleteProduct converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteProduct(ctx, id)
	return err
}

// AdminGetProductById converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminGetProductById(ctx, id)
	return err
}

// AdminGetProductImages converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetProductImages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminGetProductImages(ctx, id)
	return err
}

// UploadProductImage converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProductImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadProductImage(ctx, id)
	return err
}

// CreateCheckoutSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCheckoutSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCheckoutSession(ctx)
	return err
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProducts(ctx)
	return err
}

// CreateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProduct(ctx)
	return err
}

// ListStoreProducts converts echo context to params.
func (w *ServerInterfaceWrapper) ListStoreProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListStoreProducts(ctx)
	return err
}

// GetStoreProductById converts echo context to params.
func (w *ServerInterfaceWrapper) GetStoreProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStoreProductById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admin/product", wrapper.AdminGetProducts)
	router.POST(baseURL+"/admin/product", wrapper.AdminCreateProduct)
	router.DELETE(baseURL+"/admin/product/:id", wrapper.AdminDeleteProduct)
	router.GET(baseURL+"/admin/product/:id", wrapper.AdminGetProductById)
	router.GET(baseURL+"/admin/product/:id/image", wrapper.AdminGetProductImages)
	router.POST(baseURL+"/admin/products/:id/image", wrapper.UploadProductImage)
	router.POST(baseURL+"/checkout/session", wrapper.CreateCheckoutSession)
	router.GET(baseURL+"/products", wrapper.GetProducts)
	router.POST(baseURL+"/products", wrapper.CreateProduct)
	router.GET(baseURL+"/store/products", wrapper.ListStoreProducts)
	router.GET(baseURL+"/store/products/:id", wrapper.GetStoreProductById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW/cNhD9KwLbo2w5SdGDbnZSBAsErQEjKIpgUXCl0S5TiWTIkZ2tof9ekJRkfVBb",
	"Od0vN7ddUSLfvJl5M8NHkohCCg4cNYkfiU42UFD78zotGL9VIi0TNP+lEhIUMrCriQKKkF7bJdxKIDHR",
	"qBhfkyokKehEMYlMcP86K4BrJrj2LmdAsVTgX2Sp/7H+wO6hs7QSIgfKzRqnBXg/4gInTpGKJd1veFms",
	"QJGQfL1Yi4v6YZYLim9ek6oKiYIvJVOQkviTgVgf2mzUp6RjYYOhx0lrTdjheRk2WMTqMyRoUHZ9dKvg",
	"nsHD2FVThBV0DX+WKt8fnf+NtBZP6CWwRuSj4YZqmIzUCfMPZMQIuA/vW6o8QKWzwIFGKOyPHxVkJCY/",
	"RE95GtVJGpltFgiF2bI+gypFtxaV91D79lyGvpSUI8NtZ5FxhDUov9nt+16TN5D8JUq8A61rVRgISs6A",
	"4x0kCnya4rPoF6WE8uwkUvBhDkkBWtM1zNz+V3jYrYEHVbkzkrN9KNnST/BJuD0ofz//NMVfn7eGzd38",
	"+Wj7Zs4Op4S10VNQF0WddbN0R6gUlD+B/dXKJ0aujritdpD4O8NNi47m+W8ZiT/tVt2G/iocCzgrqNo+",
	"z9pJkwaQx0+WVUjuUCg4jUDt6Crml7BegIzK2Ak6NwffFzFdqr+p13ouF8fqUBp4Y6PNt4xnwp7FMDdr",
	"f9AN/l0ADywfJCT3oFxFJ68ury6vbAZL4FQyEpM39lFIJMWNJSiipqRG8ilk167eGxapidRFSmLX2L4H",
	"vG16ImOEloJrx/PrqytX6jkCt99TKXOW2B2iz9oFvGN2djD6uulxazUcb8h1kDONgciCpoO7RO2moIyW",
	"OT4L6C58rt/xIPjI4auEBCENoH4nJLosjBqRmLwHDGiet/BsDAk9RftbO3I0ouKiBzTeiHS7N1OGvVXV",
	"D1NUJVQjl7/a2/HdgcHDZ70U1MPXOfnSOSegAYeHxqH2lX5iRY8srVwJyAFhwtPv7OKTpyVVtAAEpW0V",
	"ZAaPydxGMWKnHn0/hR2Lh1Vs6U9bP9sO6lmx7QgK6BPT4Sy9utku0iPyuReOxvk4lLkOCWclbQ2wYLUN",
	"Fu+msiFqi/AcDy5cI3CGPtxDX7WrhtUd0BmWL4csyITqJuTI2XrgbX+l+yhzQdMeTYfy9VT1LMocmaQK",
	"o0yo4iKlSPtk9lvLjOXWHvMyRRKTFeOGoHDG7DCjuHqE2dISlJYpo8s9rzgC29RzdFtvJPVVT6Q7dz1e",
	"J7hiNrwaOkzHYe/c5jOxnzMHlvlaDbotgGPA7HFn3XE0fg106yika5MqpFkiSxsB3ZtMr9geu7MfTfvf",
	"V1t/pI7+RM38/62R12aw/vcc+sA0du8kjpNJvluQZyWTta4Xs+eWT0OEY5+009WUuHVZeomzQO9a8SXN",
	"Aj3ftfNAVf0TAAD//wNT9nDoHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
